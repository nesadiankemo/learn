!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFSIZE	rn/rn/rn.c	3;"	d	file:
BUFSIZE	execlp.c	5;"	d	file:
BUFSIZE	getword.c	4;"	d	file:
BUFSIZE	stdin.c	3;"	d	file:
HELLOWORLD	var.c	6;"	d	file:
InsertSort	list_sort.c	/^list *InsertSort(list *head)  $/;"	f
MAXVAL	random.c	5;"	d	file:
MAXWORD	bin-tree.c	7;"	d	file:
PERMS	fp.c	4;"	d	file:
TABLESIZE	random.c	4;"	d	file:
TEXT	test.c	/^}TEXT;$/;"	t	typeref:struct:__anon1	file:
add_list	insert_sort.c	/^struct node* add_list(struct node* head, int count)$/;"	f
addtree	bin-tree.c	/^struct tnode *addtree(struct tnode *p, char *w)$/;"	f
atof	atof.c	/^double atof(char s[])$/;"	f
atoi_t	var.c	/^int atoi_t(char *s)$/;"	f
buf	getword.c	/^char buf[BUFSIZE];$/;"	v
buf	test.c	/^unsigned short buf[] = {0x0012,0x6211};$/;"	v
bufp	getword.c	/^int bufp = 0;$/;"	v
c	test.c	/^	char c;$/;"	m	struct:__anon1	file:
count	bin-tree.c	/^	int count;				\/\/number of occurrences$/;"	m	struct:tnode	file:
count	insert_sort.c	/^	int count;$/;"	m	struct:node	file:
creat_time	list_sort.c	/^	int creat_time;$/;"	m	struct:node	file:
day	test.c	/^	int day;$/;"	m	struct:__anon1	file:
des	test.c	/^unsigned short des[10];$/;"	v
dir	rn/rn/rn.c	/^const char dir[] = ".\/create\/";$/;"	v
exchange_BigEndian_to_LittleEndian	test.c	/^void exchange_BigEndian_to_LittleEndian(unsigned short *dest, unsigned short *src ,int size ){$/;"	f
fd	fp.c	/^int fd,fd1;$/;"	v
fd1	fp.c	/^int fd,fd1;$/;"	v
getbits	getchar.c	/^unsigned getbits(unsigned x, int p, int n)$/;"	f
getch	getword.c	/^int getch(void)$/;"	f
getword	getword.c	/^int getword(char *word, int lim)$/;"	f
insert_sort	insert_sort.c	/^struct node* insert_sort(list *head)$/;"	f
isdigit1	bash/rename.c	/^char isdigit1(char *c)$/;"	f
isdigit1	fopen.c	/^char isdigit1(char *c)$/;"	f
isdigit1	va.c	/^char isdigit1(char *c)$/;"	f
left	bin-tree.c	/^	struct tnode *left;		\/\/left child$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
list	insert_sort.c	/^}list;$/;"	t	typeref:struct:node	file:
list	list_sort.c	/^}list;$/;"	t	typeref:struct:node	file:
list_free	insert_sort.c	/^int list_free(list *head)$/;"	f
listadd	list_sort.c	/^list * listadd(list *p, int no, int  creattime)$/;"	f
listprintf	list_sort.c	/^void listprintf(list *p){$/;"	f
lower	var.c	/^int lower(char c)$/;"	f
main	bash/rename.c	/^int main()$/;"	f
main	bin-tree.c	/^main ()$/;"	f
main	execlp.c	/^int main(int argc, char *argv[])$/;"	f
main	fopen.c	/^int main()$/;"	f
main	fork.c	/^int main()$/;"	f
main	fp.c	/^main()$/;"	f
main	fsize.c	/^int main(int argc, char **argv)$/;"	f
main	getc.c	/^int main()$/;"	f
main	getchar.c	/^main()$/;"	f
main	insert_sort.c	/^int main()$/;"	f
main	libtest/main.c	/^int main()$/;"	f
main	list_sort.c	/^void main()$/;"	f
main	printf.c	/^int main()$/;"	f
main	random.c	/^void main()$/;"	f
main	recursion.c	/^void main()$/;"	f
main	rn/rn/rn.c	/^int main()$/;"	f
main	stdin.c	/^int main()$/;"	f
main	test.c	/^int main()$/;"	f
main	va.c	/^int main()$/;"	f
main	var.c	/^int main(int argc, char *argv[])$/;"	f
main	waitpid.c	/^int main( void )$/;"	f
new_list	insert_sort.c	/^struct node* new_list(struct node *p, int count)$/;"	f
next	insert_sort.c	/^	struct node* next;$/;"	m	struct:node	typeref:struct:node::node	file:
next	list_sort.c	/^	struct node *next;$/;"	m	struct:node	typeref:struct:node::node	file:
no	list_sort.c	/^	int no;$/;"	m	struct:node	file:
node	insert_sort.c	/^typedef struct node{$/;"	s	file:
node	list_sort.c	/^typedef struct node$/;"	s	file:
pi	var.c	2;"	d	file:
pointer	test.c	2;"	d	file:
print_list	insert_sort.c	/^void print_list(list *head)$/;"	f
printd	recursion.c	/^void printd(int n)$/;"	f
printf_data	bash/rename.c	/^void printf_data(char *p)$/;"	f
printf_data	fopen.c	/^void printf_data(char *p)$/;"	f
printf_data	va.c	/^void printf_data(char *p)$/;"	f
qsort	recursion.c	/^void qsort(int v[], int left, int right)$/;"	f
right	bin-tree.c	/^	struct tnode *right;		\/\/right child$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
s	test.c	/^static TEXT s ={$/;"	v	file:
sort	list_sort.c	/^list* sort(list * head)  $/;"	f
strdup1	bin-tree.c	/^char *strdup1(char *s)$/;"	f
strlen_t	var.c	/^int strlen_t(char *s)$/;"	f
swap	recursion.c	/^void swap(int v[], int i, int j)$/;"	f
talloc	bin-tree.c	/^struct tnode* talloc(void)$/;"	f
testprintf	libtest/test.c	/^void testprintf()$/;"	f
testprintf1	libtest/test1.c	/^void testprintf1()$/;"	f
tnode	bin-tree.c	/^struct tnode{				\/\/the tree node$/;"	s	file:
treeprint	bin-tree.c	/^void treeprint(struct tnode *p)$/;"	f
ungetch	getword.c	/^int ungetch(int c)$/;"	f
word	bin-tree.c	/^	char *word;				\/\/pointer to the text$/;"	m	struct:tnode	file:

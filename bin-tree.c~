#include <stdio.h>
#include <ctype.h>
#include <string.h>

#include <stdlib.h>

#define MAXWORD 100
struct tnode *addtree(struct tnode *, char *);
void treeprint(struct tnode *);
int getword(char *, int);
struct tnode *talloc(void);
char *strdup1(char *);

struct tnode{				//the tree node
	char *word;				//pointer to the text
	int count;				//number of occurrences
	struct tnode *left;		//left child
	struct tnode *right;		//right child
};
struct tnode* talloc(void)
{
	return (struct tnode *) malloc(sizeof(struct tnode));
}


main ()
{
	struct tnode *root;
	char word[MAXWORD];

	root = NULL;
	while(getword(word, MAXWORD) != EOF)
		if(isalpha(word[0]))
			root = addtree(root, word);
	treeprint(root);
	//printf("\n");
	return 0;
}

char *strdup1(char *s)
{
	char *p;

	p = (char *)malloc(strlen(s) + 1); //+1 for '\0'
	if(p != NULL)
		strcpy(p, s);
	return p;
}

void treeprint(struct tnode *p)
{
	if(p != NULL){
		treeprint(p->left);
		printf("%s %4d\t\t\n", p->word, p->count);
		treeprint(p->right);
		//printf("\n");
	}
	
}



struct tnode *addtree(struct tnode *p, char *w)
{
	int cond;

	if(p == NULL){
		p = talloc();
		p->word = strdup1(w);
		p->count = 1;
		p->left = p->right = NULL;
	}else if(cond =	strcmp(w, p->word) == 0)
		p->count++;
	else if(cond < 0)
		p->left = addtree(p->left, w);
	else
		p->right = addtree(p->right,w);
	return p;
}


